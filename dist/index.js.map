{"version":3,"sources":["../src/index.js"],"names":["PORT","app","server","http","createServer","use","exposedHeaders","bodyParser","json","limit","WebSocket","require","ws","Server","Database","connect","then","db","console","log","catch","err","models","Model","routers","Approuter","listen","process","env","address","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,OAAO,IAAb;AACA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAGA;;;AAGAA,IAAII,GAAJ,CAAQ,oBAAK;AACTC,oBAAgB;AADP,CAAL,CAAR;;AAIAL,IAAII,GAAJ,CAAQE,qBAAWC,IAAX,CAAgB;AACpBC,WAAO;AADa,CAAhB,CAAR;;AAIA,IAAMC,YAAYC,QAAQ,IAAR,CAAlB;;AAEAV,IAAIW,EAAJ,GAAS,IAAIF,UAAUG,MAAd,CAAqB;AAC1BX,YAAQD,IAAIC;AADc,CAArB,CAAT;;AAIA;;AAEA,IAAIY,kBAAJ,GAAeC,OAAf,GAAyBC,IAAzB,CAA8B,UAACC,EAAD,EAAQ;AAClCC,YAAQC,GAAR,CAAY,mCAAZ;AACAlB,QAAIgB,EAAJ,GAASA,EAAT;AAEH,CAJD,EAIGG,KAJH,CAIS,UAACC,GAAD,EAAS;AACd,UAAMA,GAAN;AACH,CAND;;AAQA;;AAEApB,IAAIqB,MAAJ,GAAa,IAAIC,gBAAJ,CAAUtB,GAAV,CAAb;AACAA,IAAIuB,OAAJ,GAAc,IAAIC,mBAAJ,CAAcxB,GAAd,CAAd;;AAMAA,IAAIC,MAAJ,CAAWwB,MAAX,CAAkBC,QAAQC,GAAR,CAAY5B,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC1CkB,YAAQC,GAAR,6BAAsClB,IAAIC,MAAJ,CAAW2B,OAAX,GAAqBC,IAA3D;AACP,CAFD;;kBAIe7B,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport {version} from '../package.json';\nimport { createConnection } from 'net';\nimport Approuter from './app-router.js';\nimport Model from './models'\nimport Database from './database.js';\nimport { Db } from 'mongodb';\n\nconst PORT = 3001;\nconst app = express();\napp.server = http.createServer(app);\n\n\n//app.use(morgan('dev'));\n\n\napp.use(cors({\n    exposedHeaders: \"*\"\n}));\n\napp.use(bodyParser.json({\n    limit: '50mb'\n}));\n\nconst WebSocket = require('ws');\n\napp.ws = new WebSocket.Server({\n    server: app.server\n});\n\n//connect to mongo Database\n\nnew Database().connect().then((db) => {\n    console.log(\"Succesfully connected to database\");\n    app.db = db;\n\n}).catch((err) => {\n    throw(err);\n});\n\n//End connect to mongo db\n\napp.models = new Model(app);\napp.routers = new Approuter(app);\n\n\n\n\n\napp.server.listen(process.env.PORT || PORT, () => {\n        console.log(`App is running on port ${app.server.address().port}`);\n});\n\nexport default app;"]}