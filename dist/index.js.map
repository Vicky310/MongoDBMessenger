{"version":3,"sources":["../src/index.js"],"names":["PORT","app","server","http","createServer","use","exposedHeaders","bodyParser","json","limit","Database","connect","then","db","console","log","catch","err","models","Model","routers","Approuter","WebSocket","require","ws","Server","listen","process","env","address","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,OAAO,IAAb;AACA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAGAA,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAGAJ,IAAII,GAAJ,CAAQ,oBAAK;AACTC,oBAAgB;AADP,CAAL,CAAR;;AAIAL,IAAII,GAAJ,CAAQE,qBAAWC,IAAX,CAAgB;AACpBC,WAAO;AADa,CAAhB,CAAR;;AAIA;;AAEA,IAAIC,kBAAJ,GAAeC,OAAf,GAAyBC,IAAzB,CAA8B,UAACC,EAAD,EAAQ;AAClCC,YAAQC,GAAR,CAAY,mCAAZ;AACAd,QAAIY,EAAJ,GAASA,EAAT;AAEH,CAJD,EAIGG,KAJH,CAIS,UAACC,GAAD,EAAS;AACd,UAAMA,GAAN;AACH,CAND;;AAQA;;;;;;;;AAQA;;AAEAhB,IAAIiB,MAAJ,GAAa,IAAIC,gBAAJ,CAAUlB,GAAV,CAAb;AACAA,IAAImB,OAAJ,GAAc,IAAIC,mBAAJ,CAAcpB,GAAd,CAAd;;AAEA,IAAMqB,YAAYC,QAAQ,IAAR,CAAlB;;AAEAtB,IAAIuB,EAAJ,GAAS,IAAIF,UAAUG,MAAd,CAAqB;AAC1BvB,YAAQD,IAAIC;AADc,CAArB,CAAT;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDAD,IAAIC,MAAJ,CAAWwB,MAAX,CAAkBC,QAAQC,GAAR,CAAY5B,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC1Cc,YAAQC,GAAR,6BAAsCd,IAAIC,MAAJ,CAAW2B,OAAX,GAAqBC,IAA3D;AACP,CAFD;;kBAIe7B,G","file":"index.js","sourcesContent":["import http from 'http';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport {version} from '../package.json';\r\nimport { createConnection } from 'net';\r\nimport Approuter from './app-router.js';\r\nimport Model from './models'\r\nimport Database from './database.js';\r\nimport { Db } from 'mongodb';\r\n\r\nconst PORT = 3001;\r\nconst app = express();\r\napp.server = http.createServer(app);\r\n\r\n\r\napp.use(morgan('dev'));\r\n\r\n\r\napp.use(cors({\r\n    exposedHeaders: \"*\"\r\n}));\r\n\r\napp.use(bodyParser.json({\r\n    limit: '50mb'\r\n}));\r\n\r\n//connect to mongo Database\r\n\r\nnew Database().connect().then((db) => {\r\n    console.log(\"Succesfully connected to database\");\r\n    app.db = db;\r\n\r\n}).catch((err) => {\r\n    throw(err);\r\n});\r\n\r\n/*\r\nnew Database().connect((err, db) => {\r\n    if(err){\r\n        throw(err);\r\n    }\r\n    console.log(\"Successful connected to database. \");\r\n    app.db = db;\r\n}); */\r\n//End connect to mongo db\r\n\r\napp.models = new Model(app);\r\napp.routers = new Approuter(app);\r\n\r\nconst WebSocket = require('ws');\r\n\r\napp.ws = new WebSocket.Server({\r\n    server: app.server\r\n});\r\n\r\n/*\r\nlet clients = [];\r\n\r\napp.ws.on('connection', (socket) => {\r\n\r\n    const userId = clients.length + 1;\r\n\r\n    socket.userId = userId;\r\n    \r\n    const newClient = {\r\n        ws: socket,\r\n        userId: userId,\r\n    };\r\n\r\n    clients.push(newClient);\r\n    console.log('New Client connected', userId);\r\n    // listen to client\r\n    socket.on('message', (message) => {\r\n        // socket.send(message +\"\"+ new Date());\r\n        console.log('Message from', message);\r\n    });\r\n\r\n    socket.on('close', () => {\r\n        console.log('Client with userId', userId, 'is disconnected');\r\n\r\n        clients = clients.filter((client) => client.userId !== userId);\r\n    });\r\n});\r\n\r\n\r\napp.get('/', (req, res) => {\r\n    res.json ({\r\n        version: version \r\n    }) \r\n});\r\n\r\napp.get('/api/all_connections', (req, res, next) => {\r\n    return res.json({\r\n        people: clients,\r\n    })\r\n});\r\n\r\nsetInterval(() => {\r\n    // each 3 sec the function executes\r\n    console.log('There are', clients.length ,'clients in connection');\r\n    if(clients.length > 0) {\r\n        clients.forEach((client) => {\r\n            const msg = `Hey ID ${client.userId} this is a message from Server`;\r\n            client.ws.send(msg);\r\n        });\r\n    }\r\n}, 3000)\r\n*/\r\n\r\napp.server.listen(process.env.PORT || PORT, () => {\r\n        console.log(`App is running on port ${app.server.address().port}`);\r\n});\r\n\r\nexport default app;"]}