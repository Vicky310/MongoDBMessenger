{"version":3,"sources":["../src/index.js"],"names":["PORT","app","server","http","createServer","use","exposedHeaders","bodyParser","json","limit","WebSocket","require","ws","Server","clients","on","socket","userId","length","newClient","push","console","log","message","filter","client","get","req","res","version","next","people","setInterval","forEach","msg","send","listen","process","env","address","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAMA,OAAO,IAAb;AACA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAGAA,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAGAJ,IAAII,GAAJ,CAAQ,oBAAK;AACTC,oBAAgB;AADP,CAAL,CAAR;;AAIAL,IAAII,GAAJ,CAAQE,qBAAWC,IAAX,CAAgB;AACpBC,WAAO;AADa,CAAhB,CAAR;;AAMA,IAAMC,YAAYC,QAAQ,IAAR,CAAlB;;AAEAV,IAAIW,EAAJ,GAAS,IAAIF,UAAUG,MAAd,CAAqB;AAC1BX,YAAQD,IAAIC;AADc,CAArB,CAAT;;AAIA,IAAIY,UAAU,EAAd;;AAEAb,IAAIW,EAAJ,CAAOG,EAAP,CAAU,YAAV,EAAwB,UAACC,MAAD,EAAY;;AAEhC,QAAMC,SAASH,QAAQI,MAAR,GAAiB,CAAhC;;AAEAF,WAAOC,MAAP,GAAgBA,MAAhB;;AAEA,QAAME,YAAY;AACdP,YAAII,MADU;AAEdC,gBAAQA;AAFM,KAAlB;;AAKAH,YAAQM,IAAR,CAAaD,SAAb;AACAE,YAAQC,GAAR,CAAY,sBAAZ,EAAoCL,MAApC;AACA;AACAD,WAAOD,EAAP,CAAU,SAAV,EAAqB,UAACQ,OAAD,EAAa;AAC9B;AACAF,gBAAQC,GAAR,CAAY,cAAZ,EAA4BC,OAA5B;AACH,KAHD;;AAKAP,WAAOD,EAAP,CAAU,OAAV,EAAmB,YAAM;AACrBM,gBAAQC,GAAR,CAAY,oBAAZ,EAAkCL,MAAlC,EAA0C,iBAA1C;;AAEAH,kBAAUA,QAAQU,MAAR,CAAe,UAACC,MAAD;AAAA,mBAAYA,OAAOR,MAAP,KAAkBA,MAA9B;AAAA,SAAf,CAAV;AACH,KAJD;AAKH,CAxBD;;AA0BAhB,IAAIyB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBA,QAAIpB,IAAJ,CAAU;AACNqB,iBAASA;AADH,KAAV;AAGH,CAJD;;AAMA5B,IAAIyB,GAAJ,CAAQ,sBAAR,EAAgC,UAACC,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAoB;AAChD,WAAOF,IAAIpB,IAAJ,CAAS;AACZuB,gBAAQjB;AADI,KAAT,CAAP;AAGH,CAJD;;AAMAkB,YAAY,YAAM;AACd;AACAX,YAAQC,GAAR,CAAY,WAAZ,EAAyBR,QAAQI,MAAjC,EAAyC,uBAAzC;AACA,QAAGJ,QAAQI,MAAR,GAAiB,CAApB,EAAuB;AACnBJ,gBAAQmB,OAAR,CAAgB,UAACR,MAAD,EAAY;AACxB,gBAAMS,kBAAgBT,OAAOR,MAAvB,mCAAN;AACAQ,mBAAOb,EAAP,CAAUuB,IAAV,CAAeD,GAAf;AACH,SAHD;AAIH;AACJ,CATD,EASG,IATH;;AAWAjC,IAAIC,MAAJ,CAAWkC,MAAX,CAAkBC,QAAQC,GAAR,CAAYtC,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC1CqB,YAAQC,GAAR,6BAAsCrB,IAAIC,MAAJ,CAAWqC,OAAX,GAAqBC,IAA3D;AACP,CAFD;;kBAIevC,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport {version} from '../package.json';\nimport { createConnection } from 'net';\n\nconst PORT = 3000;\nconst app = express();\napp.server = http.createServer(app);\n\n\napp.use(morgan('dev'));\n\n\napp.use(cors({\n    exposedHeaders: \"*\"\n}));\n\napp.use(bodyParser.json({\n    limit: '50mb'\n}));\n\n\n\nconst WebSocket = require('ws');\n\napp.ws = new WebSocket.Server({\n    server: app.server\n});\n\nlet clients = [];\n\napp.ws.on('connection', (socket) => {\n\n    const userId = clients.length + 1;\n\n    socket.userId = userId;\n    \n    const newClient = {\n        ws: socket,\n        userId: userId,\n    };\n\n    clients.push(newClient);\n    console.log('New Client connected', userId);\n    // listen to client\n    socket.on('message', (message) => {\n        // socket.send(message +\"\"+ new Date());\n        console.log('Message from', message);\n    });\n\n    socket.on('close', () => {\n        console.log('Client with userId', userId, 'is disconnected');\n\n        clients = clients.filter((client) => client.userId !== userId);\n    });\n});\n\napp.get('/', (req, res) => {\n    res.json ({\n        version: version \n    }) \n});\n\napp.get('/api/all_connections', (req, res, next) => {\n    return res.json({\n        people: clients,\n    })\n});\n\nsetInterval(() => {\n    // each 3 sec the function executes\n    console.log('There are', clients.length ,'clients in connection');\n    if(clients.length > 0) {\n        clients.forEach((client) => {\n            const msg = `Hey ID ${client.userId} this is a message from Server`;\n            client.ws.send(msg);\n        });\n    }\n}, 3000)\n\napp.server.listen(process.env.PORT || PORT, () => {\n        console.log(`App is running on port ${app.server.address().port}`);\n});\n\nexport default app;"]}