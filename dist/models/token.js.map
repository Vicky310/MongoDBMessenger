{"version":3,"sources":["../../src/models/token.js"],"names":["Token","app","tokens","OrderedMap","id","Promise","resolve","reject","load","then","token","userId","models","user","catch","err","console","log","tokenFromCache","get","findTokenById","tokenId","_id","toString","set","cb","idObject","ObjectID","query","db","collection","findOne","result","created","Date","insertOne","info"],"mappings":"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","file":"token.js","sourcesContent":["import moment from \"moment\";\nimport { ObjectID } from \"mongodb\";\nimport {OrderedMap} from \"immutable\";\n\nexport default class Token {\n    constructor(app) {\n        this.app = app;\n        this.tokens = new OrderedMap();\n    }\n\n    loadTokenAndUser(id) {\n        return new Promise((resolve,reject) => {\n            this.load(id).then((token) => {\n\n                const userId = `${token.userId}`;\n                this.app.models.user.load(userId).then((user) => {\n                    token.user = user;\n                    return resolve(token);\n                }).catch((err) => {\n                    console.log(\"error is here\");\n                    return reject({err}); \n                });\n\n            }).catch((err) => {\n                console.log(\"error is here 2222\");\n                return reject({err});\n            })\n        })\n    }\n\n    load(id=null) {\n\n        id=`${id}`;\n\n        return new Promise((resolve,reject) => {\n            //checking in cache first\n\n            const tokenFromCache = this.tokens.get(id);\n            if(tokenFromCache) {\n                return resolve(tokenFromCache);\n            }\n            this.findTokenById(id,(err,token) => {\n                if(!err && token) {\n                    const tokenId = token._id.toString(); \n                    this.tokens = this.tokens.set(tokenId,token);\n                }\n                return err? reject(err):resolve(token);\n\n            });\n           \n        })\n    }\n\n    findTokenById(id,cb = () => {}) {\n\n        console.log(\"Begin query into database\");\n\n        \n        const idObject = new ObjectID(id);\n        const query = {_id: idObject}\n\n        const db = this.app.db;\n        db.db(\"mongodbmessenger\").collection('tokens').findOne(query, (err,result) => {\n            if(err || !result) {\n                return cb({\"message\":\"Not Found\"},null);\n            }\n            return cb(null,result);\n        })\n\n    }\n\n    create(userId) {\n        const token = {\n            userId: userId,\n            created: new Date()\n        }\n        const db = this.app.db;\n        return new Promise((resolve, reject) => {\n            db.db(\"mongodbmessenger\").collection('tokens').insertOne(token, (err, info) => {\n                return err ? reject(err) : resolve(token);\n            })\n        });\n\n    }\n}"]}