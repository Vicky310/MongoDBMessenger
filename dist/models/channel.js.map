{"version":3,"sources":["../../src/models/channel.js"],"names":["Channel","app","channels","OrderedMap","q","console","log","Promise","resolve","reject","db","collection","aggregate","err","results","options","find","toArray","id","_","toString","channelFromCache","get","findById","then","c","catch","findOne","_id","ObjectID","result","obj","idObject","members","each","value","key","memberObjectId","push","userIdObject","userId","channel","title","lastMessage","created","Date","insertOne","info","channelId","set"],"mappings":"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","file":"channel.js","sourcesContent":["import _ from 'lodash';\nimport {toString} from '../helper'\nimport { ObjectID, ObjectId } from 'mongodb';\nimport { OrderedMap } from 'immutable';\nexport default class Channel {\n    constructor(app) {\n        this.app = app;\n        this.channels =  new OrderedMap();\n    }\n\n    aggregate(q){\n        console.log(q);\n        return new Promise((resolve, reject) => {\n            console.log(\"hi\");\n            this.app.db.db(\"mongodbmessenger\").collection('channels').aggregate(q, (err, results) => {\n                console.log(\"hi2\",resolve(results), err);\n                return err ? reject(err) : resolve(results);\n            });\n        })\n    }\n\n    find(q, options = {}){\n        console.log(q);\n        return new Promise((resolve, reject) => {\n            this.app.db.db(\"mongodbmessenger\").collection('channels').find(q, options).toArray((err, results) => {\n                return err ? reject(err) : resolve(results);\n            });\n        });\n    }\n\n    load(id) {\n        \n        return new Promise( (resolve,reject) => {\n\n            id = _.toString(id);\n        //first find in cache\n        const channelFromCache = this.channels.get(id);\n\n        if(channelFromCache){\n            return resolve(channelFromCache);    \n        }\n        //lets also find in db\n        this.findById(id).then((c) => {\n            // console.log(\"c di value bc\",c);\n            return resolve(c);\n        }).catch((err) =>{\n            return reject(err);\n        }) ;\n\n\n        });\n\n\n    }\n\n    findById(id){\n        return new Promise((resolve,reject) => {\n\n            this.app.db.db(\"mongodbmessenger\").collection('channels').findOne({_id: new ObjectID(id)}, (err,result) =>{\n                \n                console.log(\"Kuch ta aaya \",result);\n                if(err || !result){\n                    return reject(err ? err : \"Not Found\");\n                }\n                return resolve(result);\n\n            });\n\n        });\n    }\n    create(obj) {\n        return new Promise((resolve, reject)=> {\n            let id = toString(_.get(obj, '_id'));\n            console.log(\"ID:\", id);\n            let idObject = id? new ObjectID(id) : new ObjectID();\n            let members = [];\n            _.each(_.get(obj, 'members', []), (value,key) => {\n\n                const memberObjectId = new ObjectID(key);\n                members.push(memberObjectId)\n            });\n\n            let userIdObject = null;\n            let userId = _.get(obj, 'userId', null);\n\n            if(userId){\n                userIdObject = new ObjectID(userId);\n            }\n\n            const channel = {\n                _id: idObject,\n                title: _.get(obj, 'title', ''),\n                lastMessage: _.get(obj, 'lastMessage', ''),\n                created: new Date(),\n                userId: userIdObject,\n                members: members\n            }\n            const db = this.app.db;\n            db.db(\"mongodbmessenger\").collection('channels').insertOne(channel, (err, info) => {\n                if(!err) {\n                    const channelId = channel._id.toString();\n                    this.channels = this.channels.set();\n                }\n                return err ? reject(err) : resolve(channel);\n            });\n        })\n        \n\n    }\n}"]}