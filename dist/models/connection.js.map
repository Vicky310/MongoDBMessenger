{"version":3,"sources":["../../src/models/connection.js"],"names":["Connection","app","connections","modelDidLoad","msg","messageObject","JSON","parse","err","console","log","ws","obj","message","stringify","send","socketId","action","_","get","payload","connection","isAuthenticated","userId","models","create","then","channelId","toString","channel","load","memberIds","each","memberId","memberConnections","filter","c","forEach","catch","channelObject","query","_id","$in","queryOptions","name","created","user","find","users","id","memberConnection","con","size","userTokenId","token","loadTokenAndUser","set","on","ObjectID","clientConnection","decodeMessage","doTheJob","remove"],"mappings":"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","file":"connection.js","sourcesContent":["import { OrderedMap } from \"immutable\";\nimport { ObjectID } from \"mongodb\";\nimport _ from 'lodash';\n\nexport default class Connection {\n    constructor(app) {\n        this.app = app;\n        this.connections = OrderedMap();\n\n        this.modelDidLoad();\n    }\n    decodeMessage(msg){\n        let messageObject = null;\n        try{\n            messageObject = JSON.parse(msg);\n        }catch(err){\n            console.log(\"Ann error\", msg);\n        }\n        return messageObject;\n    }\n\n    send(ws, obj) {\n        const message = JSON.stringify(obj);\n        ws.send(message);\n    }\n\n    doTheJob(socketId, msg){\n        const action = _.get(msg, 'action');\n        const payload = _.get(msg, 'payload');\n        const connection = this.connections.get(socketId);\n\n        switch(action) {\n\n\n\n            case 'create_message':\n\n                    if(connection.isAuthenticated){\n\n                        let messageObject = payload;\n                        messageObject.userId = _.get(connection,'userId');\n                        console.log(\"Got message from client about creating new message\", messageObject);\n\n                        this.app.models.message.create(messageObject).then((message) =>{\n\n                            console.log(\"Message final bhai:\",message);\n\n                            const channelId = _.toString(_.get(message,'channelId'));\n                            this.app.models.channel.load(channelId).then((channel) => {\n                                console.log(\"Channel of the message vla channel is\",channel);\n\n                                const memberIds = _.get(channel, 'members', []);\n\n                                _.each(memberIds, (memberId) => {\n\n                                    memberId = _.toString(memberId);\n                                    const memberConnections = this.connections.filter((c) => _.toString(c.userId) === memberId)\n                                    memberConnections.forEach((connection) => {\n                                        const ws = connection.ws;\n                                        this.send(ws, {\n\n                                            action: 'message_added',\n                                            payload: message,\n                                        })\n                                    })\n\n                                });\n                            });\n\n\n                        }).catch(err => {\n\n                            //send back to the socket client who sent this message with error\n                            const ws = connection.ws;\n                            this.send(ws, {\n                                action: 'create_message_error',\n                                payload: payload,\n                            });\n                        })\n\n                    }\n\n                    \n                break\n\n            case 'create_channel':\n                {\n                    const channel = payload;\n                    \n                    const userId = connection.userId;\n                    channel.userId = userId;\n                    this.app.models.channel.create(channel).then((channelObject) => {\n                        // Sucessfuly created channel\n                        console.log(\"Created mew cchannel\");\n                        let memberConnections = [];\n                        const memberIds = _.get(channelObject, 'members', []);\n                        const query = {\n                            _id: {$in: memberIds}\n                        };\n                        const queryOptions = {\n                            _id: 1,\n                            name: 1,\n                            created: 1\n                        }\n                        this.app.models.user.find(query, queryOptions).then((users) => {\n                            channelObject.users = users;\n\n                            _.each(memberIds, (id) => {\n                                const userId = id.toString();\n                                const memberConnection = this.connections.filter((con) => `${con.userId}` === userId);\n                                if(memberConnection.size) {\n                                    memberConnection.forEach((con) => {\n                                        const ws = con.ws;\n                                        const obj = {\n                                            action: 'channel_added',\n                                            payload: channelObject\n                                        }\n    \n                                        //send to socket matching user id in channel member\n                                        this.send(ws, obj);\n                                    });\n                                }\n                            });\n                        });\n                    });\n                    console.log('Got new channel to be created',typeof userId, channel);\n                }\n\n                break;\n            case 'auth':\n                {\n                    console.log(\"Authentication\");\n                    const userTokenId = payload;\n                    const connection = this.connections.get(socketId);\n                    if(connection) {\n                        //find user with token and verify\n                        this.app.models.token.loadTokenAndUser(userTokenId).then((token) => {\n                            const userId = token.userId;\n                            connection.isAuthenticated = true;\n                            connection.userId = `${userId}`;\n                            this.connections = this.connections.set(socketId, connection);\n                            const obj = {\n                                action: 'auth-success',\n                                payload: 'You are aunthenticated'\n                            }\n                            this.send(connection.ws, obj);\n                        }).catch((err) => {\n                            // Send login error\n                            const obj = {\n                                action: 'auth_error',\n                                payload: \"Authentication error:\" +userTokenId\n                            };\n                            this.send(connection.ws, obj);\n                        })\n\n                    }\n     \n                    console.log('USer with token id', userTokenId, typeof userTokenId);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n   \n    modelDidLoad() {\n        this.app.ws.on('connection', (ws) => {\n            const socketId = new ObjectID().toString();\n            const clientConnection = {\n                _id: `${socketId}`,\n                ws: ws,\n                userId: null,\n                isAuthenticated: false\n            }\n\n            // save this connection in Cache\n            this.connections = this.connections.set(socketId, clientConnection);\n\n            // listen any message from websocket client\n            ws.on('message', (msg) => {\n                console.log(\"Within message\");\n                const message = this.decodeMessage(msg);\n                this.doTheJob(socketId, message);\n            })\n            ws.on('close', () => {\n                // remove socket from cache\n                this.connections = this.connections.remove(socketId);\n            });\n        })\n    }\n}"]}