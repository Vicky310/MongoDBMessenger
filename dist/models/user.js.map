{"version":3,"sources":["../../src/models/user.js"],"names":["User","app","user","callback","errors","fields","validations","name","errorMessage","do","_","get","length","email","password","forEach","field","fieldValidation","isValid","msg","push","err","join","lowerCase","trim","db","collection","findOne","result","console","log","Promise","resolve","reject","beforeSave","insertOne","info","message"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;IAGqBA,I;AAEjB,kBAAYC,GAAZ,EAAgB;AAAA;;AACZ,aAAKA,GAAL,GAAWA,GAAX;AACH;;;;mCAEUC,I,EAA0B;AAAA,gBAApBC,QAAoB,uEAAT,YAAM,CAAE,CAAC;;;AAIjC;;AAEA,gBAAIC,SAAS,EAAb;AACA,gBAAMC,SAAU,CAAC,MAAD,EAAS,OAAT,EAAkB,UAAlB,CAAhB;AACA,gBAAMC,cAAc;AAChBC,sBAAM;AACFC,kCAAc,kBADZ;AAEFC,wBAAI,eAAM;;AAEN,4BAAMF,OAAOG,iBAAEC,GAAF,CAAMT,IAAN,EAAY,MAAZ,EAAoB,EAApB,CAAb;;AAEA,+BAAOK,KAAKK,MAAZ;AACH;AAPC,iBADU;AAUhBC,uBAAO;AACHL,kCAAc,sBADX;AAEHC,wBAAI,eAAM;AACN,4BAAMI,QAAQH,iBAAEC,GAAF,CAAMT,IAAN,EAAY,OAAZ,EAAqB,EAArB,CAAd;AACA,4BAAG,CAACW,MAAMD,MAAP,IAAiB,CAAC,qBAAQC,KAAR,CAArB,EAAoC;AAChC,mCAAO,KAAP;AACH;AACD,+BAAO,IAAP;AACH;AARE,iBAVS;AAoBhBC,0BAAU;AACNN,kCAAc,iDADR;AAENC,wBAAI,eAAM;AACN,4BAAMK,WAAWJ,iBAAEC,GAAF,CAAMT,IAAN,EAAY,UAAZ,EAAwB,EAAxB,CAAjB;AACA,4BAAG,CAACY,SAASF,MAAV,IAAoBE,SAASF,MAAT,GAAkB,CAAzC,EAA2C;AACvC,mCAAO,KAAP;AACH;AACD,+BAAO,IAAP;AACH;AARK;AApBM,aAApB;;AAiCAP,mBAAOU,OAAP,CAAe,UAACC,KAAD,EAAW;;AAEtB,oBAAMC,kBAAkBP,iBAAEC,GAAF,CAAML,WAAN,EAAmBU,KAAnB,CAAxB;;AAEA,oBAAGC,eAAH,EAAmB;AACf;AACA,wBAAMC,UAAUD,gBAAgBR,EAAhB,EAAhB;AACA,wBAAMU,MAAMF,gBAAgBT,YAA5B;AACA,wBAAG,CAACU,OAAJ,EAAY;AACRd,+BAAOgB,IAAP,CAAYD,GAAZ;AACH;AACJ;AAEJ,aAbD;;AAeA,gBAAGf,OAAOQ,MAAV,EAAiB;;AAEb;;AAEA,oBAAMS,MAAMX,iBAAEY,IAAF,CAAOlB,MAAP,EAAe,GAAf,CAAZ;AACA,uBAAOD,SAASkB,GAAT,EAAc,IAAd,CAAP;AACH;;AAGD;AACA,gBAAMR,QAAQH,iBAAEa,SAAF,CAAYb,iBAAEc,IAAF,CAAOd,iBAAEC,GAAF,CAAMT,IAAN,EAAW,OAAX,EAAmB,EAAnB,CAAP,CAAZ,CAAd;AACA,iBAAKD,GAAL,CAASwB,EAAT,CAAYC,UAAZ,CAAuB,MAAvB,EAA+BC,OAA/B,CAAuC,EAACd,OAAOA,KAAR,EAAvC,EAAuD,UAACQ,GAAD,EAAMO,MAAN,EAAiB;;AAEpEC,wBAAQC,GAAR,CAAY,4BAAZ,EAAyCT,GAAzC,EAA8CO,MAA9C;AAEH,aAJD;;AAMA,mBAAOzB,SAAS,IAAT,EAAeD,IAAf,CAAP;AACH;;;+BAIMA,I,EAAK;AAAA;;AAER,gBAAMuB,KAAK,KAAKxB,GAAL,CAASwB,EAApB;AACAI,oBAAQC,GAAR,CAAY,MAAZ,EAAoB5B,IAApB;AACA,mBAAO,IAAI6B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,sBAAKC,UAAL,CAAgBhC,IAAhB,EAAsB,UAACmB,GAAD,EAAMnB,IAAN,EAAe;;AAIjC,wBAAGmB,GAAH,EAAO;AACH,+BAAOY,OAAOZ,GAAP,CAAP;AACH;;AAED;;AAEAI,uBAAGC,UAAH,CAAc,MAAd,EAAsBS,SAAtB,CAAgCjC,IAAhC,EAAsC,UAACmB,GAAD,EAAMe,IAAN,EAAe;;AAEjD;AACA,4BAAGf,GAAH,EAAO;;AAEH,mCAAOY,OAAO,EAAEI,SAAU,sBAAZ,EAAP,CAAP;AACH;AACD;AACA,+BAAOL,QAAQ9B,IAAR,CAAP;AAEH,qBAVD;AAaH,iBAvBD;AAyBH,aA3BM,CAAP;AA4BH;;;;;;kBApHgBF,I","file":"user.js","sourcesContent":["import _ from 'lodash'\r\nimport {isEmail} from '../helper'\r\n\r\n\r\nexport default class User{\r\n\r\n    constructor(app){\r\n        this.app = app;\r\n    }\r\n\r\n    beforeSave(user, callback = () => {}){\r\n\r\n\r\n\r\n        //first validate the user object before save to user collection\r\n\r\n        let errors = [];\r\n        const fields  = ['name', 'email', 'password'];\r\n        const validations = {\r\n            name: {\r\n                errorMessage: 'Name is required',\r\n                do: () => {\r\n\r\n                    const name = _.get(user, 'name', '');\r\n\r\n                    return name.length; \r\n                }\r\n            },\r\n            email: {\r\n                errorMessage: 'Email is not correct',\r\n                do: () => {\r\n                    const email = _.get(user, 'email', '');\r\n                    if(!email.length || !isEmail(email)){\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            },\r\n            password: {\r\n                errorMessage: 'Password is required and more than 3 characters',\r\n                do: () => {\r\n                    const password = _.get(user, 'password', '');\r\n                    if(!password.length || password.length < 3){\r\n                        return false; \r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        fields.forEach((field) => {\r\n\r\n            const fieldValidation = _.get(validations, field);\r\n\r\n            if(fieldValidation){\r\n                // do check\r\n                const isValid = fieldValidation.do();\r\n                const msg = fieldValidation.errorMessage;\r\n                if(!isValid){\r\n                    errors.push(msg);\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        if(errors.length){\r\n\r\n            //validation test not passed \r\n\r\n            const err = _.join(errors, ',');\r\n            return callback(err, null);\r\n        }\r\n        \r\n    \r\n        //check if email already exists in db\r\n        const email = _.lowerCase(_.trim(_.get(user,'email','')));\r\n        this.app.db.collection('user').findOne({email: email}, (err, result) => {\r\n\r\n            console.log(\"checking email with result\",err, result);\r\n\r\n        });\r\n\r\n        return callback(null, user);\r\n    }\r\n\r\n    \r\n\r\n    create(user){\r\n\r\n        const db = this.app.db;\r\n        console.log(\"User\", user);\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            this.beforeSave(user, (err, user) => {\r\n\r\n                \r\n\r\n                if(err){\r\n                    return reject(err);\r\n                }\r\n\r\n                //insert new user object to user collection\r\n\r\n                db.collection('user').insertOne(user, (err, info) => {\r\n\r\n                    // check if error return error to user \r\n                    if(err){\r\n\r\n                        return reject({ message : \"An error saving user\"});\r\n                    }\r\n                    //otherwise return user object to user\r\n                    return resolve(user);\r\n\r\n                });\r\n\r\n\r\n            });\r\n           \r\n        });\r\n    }\r\n\r\n}"]}