{"version":3,"sources":["../../src/models/user.js"],"names":["saltRound","User","app","users","OrderedMap","query","options","Promise","resolve","reject","db","collection","find","toArray","err","q","regex","RegExp","$or","name","$regex","email","_id","created","results","length","message","user","_","get","password","findUserByEmail","result","hashPassword","isMatch","bcrypt","compareSync","userId","models","token","create","then","catch","callback","findOne","id","userInCache","findUserById","set","console","log","ObjectID","errors","fields","validations","errorMessage","do","forEach","field","fieldValidation","isValid","msg","push","join","toLower","trim","hashSync","userFormatted","Date","beforeSave","insertOne","info","toString"],"mappings":"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","file":"user.js","sourcesContent":["import _ from 'lodash';\nimport {isEmail} from '../helper';\nimport bcrypt from 'bcrypt';\nimport {ObjectID} from 'mongodb';\nimport {OrderedMap} from 'immutable';\n\nconst saltRound = 10;\n\nexport default class User{\n\n    constructor(app){\n        this.app = app;\n        \n        this.users = new OrderedMap();\n    }\n\n    find(query = {}, options = {}) {\n        \n        return new Promise((resolve, reject) => {\n            const db = this.app.db;\n            db.db(\"mongodbmessenger\").collection('users').find(query, options).toArray((err, users) => {\n                return err ? reject(err) : resolve(users);\n            })\n        });\n    }\n\n\n    search(q=\"\") {\n\n        return new Promise((resolve,reject)=> {\n\n            const regex = new RegExp(q,'i');\n\n            const query = {\n                $or: [\n                    {name: {$regex: regex}},\n                    {email: {$regex: regex}}\n                ],\n            };\n            const db = this.app.db;\n        db.db(\"mongodbmessenger\").collection('users').find(query,{_id:true,name:true,created:true}).toArray((err,results)=> {\n            if(err || !results || !results.length) {\n                return reject({message: \"Not Found\"});  \n            }\n            return resolve(results);\n        });\n\n        });\n\n    }\n\n    login(user) {\n        const email = _.get(user, 'email', '');\n        const password = _.get(user, 'password', '');\n        return new Promise((resolve, reject) => {\n            if(!password || !email || !isEmail(email)) {\n                return reject({message: \"Error in login\"})\n            }\n\n            //find in database\n\n            this.findUserByEmail(email, (err, result) => {\n                if(err) {\n                    return reject({message: \"Login Error\"});\n                }\n                // if found user compare the password hash and plain text\n                const hashPassword = _.get(result, 'password');\n                const isMatch = bcrypt.compareSync(password, hashPassword);\n                if(!isMatch) {\n                    return reject({message: \"Login error\"});\n                }\n                // Login successful create new token and save to token collection\n                const userId = result._id;\n                this.app.models.token.create(userId).then((token) => {\n                    token.user = result;\n                    return resolve(token);\n                }).catch(err => {\n                    return reject({message: \"Login Error\"});\n                });\n            })\n        })\n\n    }\n\n\n    findUserByEmail(email, callback = () => {}) {\n        const db = this.app.db;\n        db.db(\"mongodbmessenger\").collection('users').findOne({email: email}, (err, result) => {\n            if(err || !result) {\n                return callback({message: \"User not found\"})\n            }\n\n            return callback(null, result);\n        })\n    }\n\n    load(id) {\n\n        id = `${id}`;\n        // eslint-disable-next-line no-undef\n        return new Promise((resolve, reject) => {\n            // find in cache if found we return and dont need to query db\n            const userInCache = this.users.get(id);\n            if(userInCache) {\n                return resolve(userInCache);\n            }\n            // if not found then start query db\n            this.findUserById(id, (err, user) => {\n                if(!err && user) {\n                    this.users = this.users.set(id, user);\n                }\n                return err ? reject(err) : resolve(user);\n            });\n      \n        })\n    }\n\n    findUserById(id, callback = () => {}) {\n        console.log(\"Query in Database\");\n        const db = this.app.db;\n        if(!id) {\n            return callback({message: \"User not found\"}, null);\n        }\n        const userId = new ObjectID(id);\n        db.db(\"mongodbmessenger\").collection('users').findOne({_id: userId}, (err, result) => {\n            if(err || !result) {\n                return callback({message: \"User not found\"});\n\n            }\n            return callback(null, result);\n        });\n    }\n    beforeSave(user, callback = () => {}){\n\n        //first validate the user object before save to user collection\n        let errors = [];\n        const fields  = ['name', 'email', 'password'];\n        const validations = {\n            name: {\n                errorMessage: 'Name is required',\n                do: () => {\n\n                    const name = _.get(user, 'name', '');\n\n                    return name.length; \n                }\n            },\n            email: {\n                errorMessage: 'Email is not correct',\n                do: () => {\n                    const email = _.get(user, 'email', '');\n                    if(!email.length || !isEmail(email)){\n                        return false;\n                    }\n                    return true;   \n                }\n            },\n            password: {\n                errorMessage: 'Password is required and more than 3 characters',\n                do: () => {\n                    const password = _.get(user, 'password', '');\n                    if(!password.length || password.length < 3){\n                        return false; \n                    }\n                    return true;\n                }\n            }\n        }\n\n\n        fields.forEach((field) => {\n\n            const fieldValidation = _.get(validations, field);\n\n            if(fieldValidation){\n                // do check\n                const isValid = fieldValidation.do();\n                const msg = fieldValidation.errorMessage;\n                if(!isValid){\n                    errors.push(msg);\n                }\n            }\n\n        });\n\n        \n        if(errors.length){\n\n            //validation test not passed \n\n            const err = _.join(errors, ',');\n            return callback(err, null);\n        }\n        \n        const db = this.app.db;\n        //check if email already exists in db\n        const email = _.toLower(_.trim(_.get(user, 'email','')));\n        db.db(\"mongodbmessenger\").collection('users').findOne({email: email}, (err, result) => {\n            console.log(\"Checking Email with result:\", err, result);\n            if(err || result) {\n                return callback({message: \"Email already Exist\"}, null);\n            }\n\n            // return callback with success checked\n            const password = _.get(user, 'password');\n            const hashPassword = bcrypt.hashSync(password, saltRound);\n\n            const userFormatted = {\n                name: `${_.trim(_.get(user, 'name'))}`,\n                email: email,\n                password: hashPassword,\n                created: new Date()\n            };\n\n            return callback(null, userFormatted);\n        });\n    }\n\n    \n\n    create(user){\n\n        const db = this.app.db;\n        console.log(\"User\", user);\n        return new Promise((resolve, reject) => {\n            \n            \n            this.beforeSave(user, (err, user) => {\n\n                console.log(\"After validation: \", err,user);\n                console.log(\"Error ta nul hi hai\",err);\n                if(err){\n                    return reject(err);\n                }\n\n                // insert new user object to user collection\n\n                //console.log(\"just to check db is correct here\",db);\n                db.db(\"mongodbmessenger\").collection('users').insertOne(user, (err, info) => {\n\n                    console.log(\"coming in here.....\")\n                    // check if error return error to user \n                    if(err){\n\n                        return reject({ message : \"An error saving user\"});\n                    }\n                    //otherwise return user object to user\n                    const userId = _.get(user, '_id').toString();\n                    this.users = this.users.set(userId, user);\n\n                    return resolve(user);\n\n                });\n\n\n            });\n           \n        });\n    }\n\n}"]}