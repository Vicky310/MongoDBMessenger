{"version":3,"sources":["../src/app-router.js"],"names":["START_TIME","Date","Approuter","app","setupRouter","bind","console","log","get","req","res","next","json","started","fromNow","post","body","models","user","create","then","_","unset","status","catch","error","err","tokenId","token","loadTokenAndUser","keyword","search","results","userId","load","login","channelId","message","channel","members","query","_id","$in","options","name","created","password","find","users","aggregate","channels"],"mappings":"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","file":"app-router.js","sourcesContent":["import moment from 'moment';\nimport _ from 'lodash';\nimport { response } from 'express';\n\nexport const START_TIME = new Date();\nexport default class Approuter{\n\n    constructor(app){\n        this.app = app;\n\n        this.setupRouter = this.setupRouter.bind(this);\n        this.setupRouter();\n    }\n\n    setupRouter(){\n        \n        const app = this.app;\n\n        console.log(\"App router works\")\n\n        \n        /**\n         * @endpoint /\n         * method should be GET @method: GET\n         **/\n\n         app.get('/', (req, res, next) => {\n            return res.json({\n                started: moment(START_TIME).fromNow(),\n            })\n\n         });\n\n        /**\n         * @endpoint /api/users\n         *  @method: POST\n         **/\n\n         app.post('/api/users', (req, res, next) => {\n\n            const body = req.body;          \n \n            app.models.user.create(body).then((user) => {\n                _.unset(user, 'password');\n                return res.status(200).json(user);\n\n            }).catch(err => {\n\n               return res.status(503).json({error: err});\n\n            })\n            \n         });\n\n        /**\n         * @endpoint /api/users/me\n         * method should be GET @method: GET\n         **/\n\n         app.get('/api/users/me',(req,res,next) => {\n\n            let tokenId = req.get('authorization');\n\n            if(!tokenId) {\n                //get token from query\n\n                tokenId = _.get(req,'query.auth');\n            }\n            app.models.token.loadTokenAndUser(tokenId).then((token) => {\n\n                return res.json(token);\n\n            }).catch(err => {\n\n                return res.status(401).json({\n                    error: err\n                })\n            });\n            \n         });\n\n\n               /**\n         * @endpoint /api/users/search\n         *  @method: POST\n         **/\n        app.post('/api/users/search',(req,res,next) => {\n            const keyword = _.get(req,'body.search','');\n            app.models.user.search(keyword).then((results)=> {\n\n                return res.status(200).json(results);\n            }).catch((err) => {\n                return res.status(404).json({\n                    error:'Not Found'\n                })\n            })\n        })\n\n\n                /**\n         * @endpoint /api/users:id\n         *  @method: GET\n         **/\n\n         app.get('/api/users/:id', (req, res, next) => {\n                const userId = _.get(req, 'params.id');\n\n                app.models.user.load(userId).then((user) => {\n                    _.unset(user, 'password');\n                    return res.status(200).json(user);\n                }).catch(err => {\n                    return res.status(404).json({\n                        error: err,\n                    })\n                });\n\n         });\n\n          /**\n         * @endpoint /api/users/login\n         *  @method: POST\n         **/\n\n         app.post('/api/users/login', (req, res, next) => {\n            const body = _.get(req, 'body');\n            app.models.user.login(body).then((token) => {\n                _.unset(token, 'user.password');\n                return res.status(200).json(token);\n            }).catch(err => {\n                return res.status(401).json({\n                    error: err\n                })\n            })\n        })\n\n         /**\n         * @endpoint /api/channels/:id\n         *  @method: GET\n         **/\n\n         app.get('/api/channels/:id', (req, res, next) => {\n\n            const channelId = _.get(req, 'params.id');\n            if(!channelId){\n                return res.status(404).json({error: {message: \"Not Found.\"}});\n            }\n            app.models.channel.load(channelId).then((channel) => {\n\n                //fetch all users belonging to the member id\n                const members = channel.members;\n                const query = {\n                    _id: {$in: members}\n                }\n                const options = {_id: 1, name: 1, created: 1, password:0};\n                app.models.user.find(query, options).then((users) => {\n                    channel.users = users;\n                    return res.status(200).json(channel);\n\n                }).catch((err) => {\n                    return res.status(404).json({error: {message: \"Not Found.\"}}); \n                });\n\n                \n\n            }).catch((err) => {\n                return res.status(404).json({error: {message: \"Not Found.\"}});\n            });\n         });\n\n        /**\n         * @endpoint /api/me/channels\n         * @method: GET\n         **/\n\n        app.get('/api/me/channels', (req, res, next) => {\n\n            let tokenId = req.get('authorization');\n\n            if(!tokenId) {\n                //get token from query\n\n                tokenId = _.get(req,'query.auth');\n            }\n            console.log(\"daddaADDAD\",tokenId);\n            app.models.token.loadTokenAndUser(tokenId).then((token) => {\n                const userId = token.userId;\n                // const query = {\n                //     members: {$all: [userId]}\n                // };\n\n                const query = [\n                \n                ];\n                // const query = [\n                //     {\n                //         $lookup: {\n                //             from: 'users',\n                //             localField: 'members' ,\n                //             foreignField: '_id',\n                //             as: 'users',\n                //         }\n                //     }\n                // ];\n                console.log(\"adsad\",query)\n                app.models.channel.aggregate(query).then((channels)=>{\n                    return res.status(200).json(channels);\n                }).catch(err =>{\n                    return res.status(404).json({error: {message: \"Not found.\"}});\n                }) \n            }).catch(err => {\n                return res.status(401).json({\n                    error: \"Access denied.\"\n                })\n            });\n\n            // return res.json({it: \"works\"});\n        });\n    }\n}"]}